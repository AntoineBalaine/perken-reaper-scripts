* Configuration
** Key sequences / Bindings
You may define or change key sequences for a specific context (in ~main.lua~ or ~midi.lua~) or for all contexts (in ~global.lua~).

I organize the entries in these files by ~action type~. 

Here is an example snippet that declares some bindings in the ~timeline_operators~
action type section.
  #+begin_src lua
  timeline_operator = {
    ["c"] = "Change",
    ["t"] = "Play",
    ["d"] = "CutItems",
    ["y"] = "CopyItems", 
  },
  #+end_src

  Actions may also be put into folders. To create a folder,  follow this format:
  #+begin_src  lua
  ["<C-c>"] = "ToggleFloatingWindows",
  ["<SPC>"] = { "+leader commands", {
    ["<SPC>"] = "ShowActionList",
    ["h"] = "ShowReaperKeysHelp",
    ["r"] = {"+regions", {
                ["d"] = "DeleteRegion",
    }},
  }}, -- be sure to close the folder
  #+end_src
*** Action Types
Here's a short description of all the action types:

  | action type             | description                                                      |
  |-------------------------+------------------------------------------------------------------|
  | ~command~                 | A generic command. Does not compose, accessible from every mode. |
  | ~timeline_motion~         | Moves the edit cursor somewhere on the timeline.                 |
  | ~timeline_selector~       | Sets the timeline selection .                         |
  | ~timeline_operator~       | An actions that operates on a timeline selection.                |
  | ~track_motion~            | Changes the selected track.                                      |
  | ~track_selector~          | Selects a track or multiple tracks.                     |
  | ~track_operator~          | An actions that operaes on a selection of tracks.        |
  | ~visual_timeline_command~ | A command only available in visual timeline mode.   |
  | ~visual_track_command~    | A command only available in visual track mode                |
  | ~meta_command~            | A special command handled by the reaper-keys engine. |
  
** Key Sequences
In which ways you may compose keys (i.e. the available key sequences) depends on the mode of reaper-keys.
Listed below are the valid action sequences in each mode.

*** All Modes
      | ~command~                                 |
      | ~number~, ~command~                         |
      | ~register_action~, ~register_location~      |
      | ~timeline_operator~, ~timeline_selector~    |
      | ~track_motion~                            |
      | ~number~, ~track_motion~                    |
      | ~number~, ~meta_command~, ~register_location~ |
      | ~meta_command~, ~register_location~         |
      | ~meta_command~                           |
*** Normal  Mode
      | ~timeline_operator~, ~timeline_selector~       |
      | ~timeline_operator~, ~timeline_motion~         |
      | ~timeline_operator~, ~number~, ~timeline_motion~ |
      | ~timeline_motion~                            |
      | ~number~, ~timeline_motion~                    |
      | ~track_operator~, ~track_motion~               |
      | ~track_operator~, ~number~, ~track_motion~       |
      | ~track_operator~, ~track_selector~             |
      
      /return to normal mode via '<ESC'> by default/
*** Visual Timeline Mode
      | ~visual_timeline_command~ |
      | ~timeline_operator~       |
      | ~timeline_selector~       |
      | ~timeline_motion~         |
      | ~number~, ~timeline_motion~ |
      | ~track_selector~          |
      
/enter this mode by via 'v' by default./
*** Visual Track
      | ~track_operator~       |
      | ~track_selector~       |
      | ~timeline_operator~    |
      | ~track_motion~         |
      | ~number~, ~track_motion~ |
      
      /enter this mode via 'V' by default/
** Actions
The available actions for bindings are in the [[file:actions.lua]] file.

If an action does not exist for a command you want to create a binding for, you
may add an entry into [[file:actions.lua]] You just need to come up with a name for the
action and get it's ~Command Id~ ( available in reapers action list).

Here is an example entry:

#+begin_src lua
SelectFoldersChildren = "_SWS_SELCHILDREN2",
#+end_src

Reaper-keys actions may also be a sequence of command id's, reaper-key
action names, internal 'lib' or 'util' functions, or any combination of them. They may
also have additional options. So 

Here is an example of a more complicated action definition, that makes use of 
previous ones, and makes use of the repetitions option.

#+begin_src lua
    Stop = 40667,
    SetModeNormal = lib.setModeToNormal,
    Reset = {"Stop", "SetModeNormal"},
    Reset4TimesAndPlayForSomeReason = {{"Reset", repetitions=4}, "TransportPlay"}
#+end_src

The available options are:

| option            | use                                                                                                  |
|-------------------+------------------------------------------------------------------------------------------------------|
| repetitions       | specifies the number of times to run the action                                                      |
| midiCommand       | indicates that the action id is from REAPERs 'MidiEditor' section                                    |
| setTimeSelection  | used with timeline operator actions to set the timeline selection to the preceding movement/selector |
| setTrackSelection | used with track operator actions to keep the preceding track movement/selector selection             |
** Advanced Configuration
If you are interested in adding another mode or action type to reaper keys and
aren't scared of a bit of lua scripting, take a look at [[file:~/Dotfiles/.config/REAPER/Scripts/reaper-keys/internal/command/sequence_functions/][sequence functions]]
directory.  

There you will find all the functions that execute composed actions (excluding
meta actions). There is a file for each context, and a section for each mode.

Here is an example entry that defines the sequence ~'timeline_operator'
timeline_motion'~, with the accompanying 'glue' function that composes the actions.

#+begin_src lua
-- in global.lua
  normal = {
    {
      { 'timeline_operator', 'timeline_motion' },
      function(timeline_operator, timeline_motion)
        -- check out this link for the reaper api definitions
        -- https://www.reaper.fm/sdk/reascript/reascripthelp.html
        -- this gets the current time selection
        local start_sel, end_sel = reaper.GetSet_LoopTimeRange(false, false, 0, 0, false)
        -- runner provides utility functions to execute actions, and do other things
        runner.makeSelectionFromTimelineMotion(timeline_motion, 1)
        runner.runAction(timeline_operator)
        -- check if we were passed a table so we don't break when checking an option
        if type(timeline_operator) ~= 'table' or not timeline_operator['setTimeSelection'] then
          -- revert the time selection because we were not specified not to
          reaper.GetSet_LoopTimeRange(true, false, start_sel, end_sel, false)
        end
      end
    },
    -- ...
  },
#+end_src

When a key binding sequence triggers the action, it will be passed the values of
the actions used to trigger it. 

So in this case, if one types ~tl~ 

Reaper keys will find the entries "Play" and "NextBeat" in it's search in the definitions.

#+begin_src lua
-- in definitoins/global.lua the 
  timeline_operator = {
    ["t"] = "Play",
  },
  timeline_motion = {
    ["l"] = "NextBeat",
  },
#+end_src

And find the value of the action in actions.lua

#+begin_src lua
-- in definitions/actions.lua
Play = {"TimeSelectionStart", "TransportPlay" , setTimeSelection=true},
NextBeat = 40841,
#+end_src

and execute the function with
#+begin_src lua
  function({"TimeSelectionStart", "TransportPlay" , setTimeSelection=true}, 40841)
#+end_src

Reaper keys prioritizes entries in order of  context, then index in the list.

It is enough to define an entry like the above, with a new action type or key
type sequence, to create a new action type.

To create a new mode, add an entry at the level of 'normal' in the example. Then
populate it with entries alike the above.




